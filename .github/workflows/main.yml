name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }} for test
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run test


  build:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        node-version: [20.x]
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }} for build
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: echo "Build the application for production deployment!"


  deploy:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        node-version: [20.x]
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }} for deploy
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Deploy to the server
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
        SSH_HOST: ${{ secrets.SSH_HOST }}
      run: |
        echo "${SSH_PRIVATE_KEY}" > private_key.pem
        chmod 600 private_key.pem
        rsync -avz --no-times --exclude='node_modules' --exclude='.git' -e "ssh -o StrictHostKeyChecking=no -i private_key.pem" ./ $SSH_USERNAME@$SSH_HOST:/
        ssh -i private_key.pem ${SSH_USERNAME}@${SSH_HOST} 'bash -s' < echo "Pushed all the source code!!!"

    - name: Clean up SSH key
      run: rm private_key.pem